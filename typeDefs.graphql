scalar Date

type Query {
	me: User
	findCurrentMarkingPeriod(_id: ID!): CurrentMarkingPeriod!
	totalUsers: Int!
	allUsers: [User!]!

	totalStudents: Int!
	allStudents: [Student!]!
	classRoster(period: periodName): [Student!]!
	student(_id: ID!): Student!
	lesson(_id: ID!): Lesson!

	findStudentByPeriodAndDesk(period: periodName!, desk: Int!): Student
	numberOfStudentsInCourse(period: periodName): Int!

	findLesson(_id: ID!): Lesson
	findLessonByName(name: String!): Lesson
	findLessonsByUnit(inUnit: String): [Lesson]
	findAllLessons: [Lesson!]

	findUnit(_id: ID!): Unit!
	findUnitsByGrade(gradeLevel: GradeLevelEnum): [Unit!]

	findClassPeriod(period: periodName, assignedDate: Date): ClassPeriod
	findClassPeriodsForCourse(period: periodName): [ClassPeriod]
	findClassPeriods: [ClassPeriod]
	findClassPeriodById(_id: ID!): ClassPeriod!
	findClassPeriodByTestDueDate(period: periodName, dueDate: Date): ClassPeriod

	findAssignmentByStudentAndDateAndType(input: FindAssignmentByStudentAndDateAndType): Student!
}

type Mutation {
	createAccount(name: String!, password: String!): User!
	login(name: String!, password: String!): User
	logout: Boolean
	setCurrentMarkingPeriod(_id: ID!, markingPeriod: MarkingPeriodEnum): CurrentMarkingPeriod
	createMarkingPeriod(markingPeriod: MarkingPeriodEnum): CurrentMarkingPeriod
	addStudent(input: StudentDetails!): Student!
	removeStudent(_id: ID!): RemoveStudentPayLoad!
	updateStudent(input: UpdateStudentInput!): Student!

	addLearningStyle(_id: ID!, learningStyle: String!): Student

	updateResponsibilityPoints(input: UpdateResponsibilityPointsInput): Student!

	hideStudentFromRoster(_id: ID!, isHiddenFromRoster: Boolean!): Student!

	createClassPeriod(input: ClassPeriodInput): ClassPeriod
	removeClassPeriod(input: RemoveClassPeriodInput!): RemoveClassPeriodPayLoad!

	createLesson(input: LessonInput): Lesson!
	editLesson(_id: ID!, input: LessonInput): Lesson!
	removeLesson(_id: ID!): RemoveLessonPayLoad!

	createUnit(input: UnitInput): Unit!
	removeUnit(gradeLevel: GradeLevelEnum!, name: String!): RemoveUnitPayLoad!

	markStudentAbsent(_id: ID!, date: Date): Student
	unduMarkStudentAbsent(_id: ID!, date: Date): Student
	markStudentLate(_id: ID!, date: Date): Student
	unduMarkStudentLate(_id: ID!, date: Date): Student

	scoreAssignment(input: AssignmentScoringInput): ScoreAssignmentPayload!
	undoScoreAssignment(input: UndoAssignmentScoringInput): UndoScoreAssignmentPayload!
	updateAssignment(input: UpdateAssignmentInput): UpdateAssignmentPayload!
	addAssignment(input: AddAssignmentInput): AddAssignmentPayload!

	removeTest(input: RemoveTestInput): RemoveTestPayload!
	scoreMultipleTests(input: MultipleTestScoringInput): MultipleScoreTestPayload!
	undoScoreTest(input: UndoScoreTestInput): UndoScoreTestPayload!

	createSocraticQuestionProtocol(input: SocraticQuestionProtocolInput): [Student!]
	updateSocraticQuestionProtocol(
		input: UpdateSocraticQuestionInput
	): UpdatedSocraticQuestionProtocolPayload
	deleteSocraticQuestionProtocol(input: DeleteSocraticQuestionProtocolInput): [Student]
}

input AddAssignmentInput {
	period: periodName!
	assignedDate: Date!
	dueDate: Date!
	markingPeriod: MarkingPeriodEnum
	readingPages: String!
	readingSections: String!
	assignmentType: AssignmentType
	maxScore: Int!
}

type AddAssignmentPayload {
	students: [Student]
}

type CurrentMarkingPeriod {
	markingPeriod: MarkingPeriodEnum!
}

input MultipleTestScoringInput {
	period: periodName
	dueDate: Date
	scoredTests: [ScoredTestInput]
}

input ScoredTestInput {
	_id: ID!
	dueDate: Date!
	period: periodName
	missing: Boolean!
	exempt: Boolean
	score: Int!
	earnedPoints: Int!
	studyTime: Int!
}

input UndoScoreTestInput {
	_id: ID!
	dueDate: Date!
	earnedPoints: Int
}

type UndoScoreTestPayload {
	testScoreReset: Boolean
	student: Student
}

type MultipleScoreTestPayload {
	# scored: Boolean
	students: [Student]
	classPeriod: ClassPeriod
}

input RemoveTestInput {
	assignedDate: Date!
	period: periodName
}

type RemoveTestPayload {
	removed: Boolean
	classPeriod: ClassPeriod
	students: [Student]
}

input RemoveClassPeriodInput {
	_id: ID!
	date: Date!
	withAssignments: Boolean
	withTest: Boolean
	period: periodName
}

input UpdateResponsibilityPointsInput {
	_id: ID!
	responsibilityPoints: Int!
}

type ScoreAssignmentPayload {
	scored: Boolean!
	student: Student!
}
type UpdateAssignmentPayload {
	students: [Student]
	classPeriod: ClassPeriod
}

type UndoScoreAssignmentPayload {
	assignmentScoreReset: Boolean!
	student: Student!
}

input FindAssignmentByStudentAndDateAndType {
	_id: ID!
	date: Date
	assignmentType: AssignmentType
}

input UpdateAssignmentInput {
	period: periodName!
	assignedDate: Date!
	dueDate: Date!
	markingPeriod: MarkingPeriodEnum
	readingPages: String!
	readingSections: String!
	assignmentType: AssignmentType
	maxScore: Int!
}

input AssignmentScoringInput {
	_id: ID!
	date: Date!
	responsibilityPoints: Int!
	missing: Boolean!
	exempt: Boolean
	assignmentType: AssignmentType!
	score: Int!
	earnedPoints: Int
	comments: [String]
	late: Boolean!
}

input UndoAssignmentScoringInput {
	_id: ID!
	date: Date!
	assignmentType: AssignmentType!
	score: Int!
	earnedPoints: Int
}

input UnitInput {
	name: String!
	gradeLevel: GradeLevelEnum!
}

type Unit {
	_id: ID!
	name: String!
	hasLessons: [Lesson]
	gradeLevel: GradeLevelEnum!
}

type ClassPeriodPayLoad {
	classPeriod: ClassPeriod
}

type ClassPeriod {
	_id: ID
	grade: GradeLevelEnum
	assignedLesson: Lesson
	assignedDate: Date
	period: periodName
	absentStudents: [Student]
	assignedHomework: [AssignedHomework]
	assignedTest: AssignedTest
}

input ClassPeriodInput {
	grade: GradeLevelEnum
	assignedLesson: String
	assignedDate: Date
	period: periodName
	assignedHomework: [AssignedHomeworkInput]
	assignedTest: AssignedTestInput
}

input AssignedTestInput {
	assignedDate: Date!
	dueDate: Date!
	markingPeriod: MarkingPeriodEnum
	readingPages: String!
	readingSections: String!
	assignmentType: AssignmentType
	maxScore: Int
	scored: Boolean
}

type AssignedTest {
	assignedDate: Date
	dueDate: Date
	markingPeriod: MarkingPeriodEnum
	readingPages: String
	readingSections: String
	assignmentType: AssignmentType
	maxScore: Int
	scored: Boolean
}

input AssignedHomeworkInput {
	assignedDate: Date!
	dueDate: Date!
	markingPeriod: MarkingPeriodEnum
	readingPages: String!
	readingSections: String!
	assignmentType: AssignmentType
	maxScore: Int
}

type AssignedHomework {
	_id: ID!
	assignedDate: Date!
	dueDate: Date!
	markingPeriod: MarkingPeriodEnum
	readingPages: String!
	readingSections: String!
	assignmentType: AssignmentType
	maxScore: Int
}

type RemoveLessonPayLoad {
	removed: Boolean!
	lesson: Lesson!
}

type RemoveUnitPayLoad {
	removed: Boolean!
	unit: Unit!
}

type RemoveClassPeriodPayLoad {
	removed: Boolean!
	classPeriod: ClassPeriod!
}

input LessonInput {
	lessonName: String!
	inUnit: String
	essentialQuestion: EssentialQuestionInput
	socraticQuestions: [SocraticQuestionInput]
	studyGuideQuestions: [String]
	vocabWords: [VocabInput]
	readings: ReadingsInput
	workDue: [AssignmentsInput]
	warmup: String!
}

type Lesson {
	_id: ID
	lessonName: String
	inUnit: Unit
	essentialQuestion: EssentialQuestion
	socraticQuestions: [SocraticQuestion]
	studyGuideQuestions: [String]
	vocabWords: [Vocab]
	readings: Readings
	workDue: [Assignments]
	warmup: String
}

type SocraticQuestion {
	type: socraticQuestionsTypeEnum!
	question: String!
}

enum GradeLevelEnum {
	EIGHTH
	SEVENTH
	SIXTH
}

input AssignmentsInput {
	type: AssignmentType!
	readingPages: String
	readingSections: String
}

enum AssignmentType {
	OEQ
	THINKING_GUIDE
	BLOG
	TEST
	EXTRA_CREDIT
	PARENT_CONTACT
}

type Assignments {
	type: AssignmentType!
	readingPages: String
	readingSections: String
}

type Readings {
	pages: String
	sections: String
}

input ReadingsInput {
	pages: String!
	sections: String!
}

input VocabInput {
	word: String!
	partOfSpeech: partsOfSpeechEnum!
	definition: String!
}

enum partsOfSpeechEnum {
	NOUN
	VERB
	ADJECTIVE
	ADVERB
	PREPOSITION
	PRONOUN
	INTERJECTION
	CONJUNCTION
}

input EssentialQuestionInput {
	type: essentialQuestionTypeEnum!
	textStructure: majorTextStructureEnum!
	question: String!
}

input SocraticQuestionInput {
	type: socraticQuestionsTypeEnum!
	question: String!
}

enum socraticQuestionsTypeEnum {
	CONCEPTUAL_CLARIFICATION
	PROBING_ASSUMPTIONS
	PROBING_RATIONALE_REASONS_EVIDENCE
	QUESTIONING_VIEWPOINTS_AND_PERSPECTIVE
	PROBING_IMPLICATIONS_AND_CONSEQUENCES
	QUESTION_THE_QUESTION
}

enum essentialQuestionTypeEnum {
	HOW
	WHY
}

type EssentialQuestion {
	type: essentialQuestionTypeEnum!
	textStructure: majorTextStructureEnum!
	question: String!
}

type RemoveStudentPayLoad {
	removed: Boolean
	student: Student!
}

type User {
	_id: ID!
	name: String!
}

enum periodName {
	A_12
	B_12
	A_34
	B_34
	A_67
	B_67
}

input StudentDetails {
	firstName: String!
	lastName: String!
	nickName: String
	schoolID: String
	responsibilityPoints: Int!
	period: periodName!
	desk: Int!
	teacher: String!
	isHiddenFromRoster: Boolean!
	daysAbsent: [Date]
	hasAssignments: [StudentAssignmentsInput]
	hasTests: [StudentTestsInput]
}

type Student {
	_id: ID!
	schoolID: String
	firstName: String!
	lastName: String!
	nickName: String
	responsibilityPoints: Int!
	period: periodName!
	desk: Int!
	teacher: String!
	isHiddenFromRoster: Boolean!
	learningStyle: String
	daysAbsent: [Date]
	daysLate: [Date]
	hasAssignments: [StudentAssignments]
	hasTests: [StudentTests]
	hasProtocols: [Protocol]
}

interface Protocol {
	period: periodName
	markingPeriod: MarkingPeriodEnum
	assignedDate: Date!
	isActive: Boolean
	isPresent: Boolean
}

type SocraticQuestionProtocol implements Protocol {
	socraticQuestion: String
	readingSections: String
	thinkPairScore: Int
	thinkPairEarnedPoints: Int
	shareScore: Int
	shareEarnedPoints: Int
	period: periodName
	markingPeriod: MarkingPeriodEnum
	assignedDate: Date!
	isActive: Boolean
	isPresent: Boolean
}

input DeleteSocraticQuestionProtocolInput {
	period: periodName
	socraticQuestion: String
}

type DeletedSocraticQuestionProtocolPayload {
	students: [Student]
}

input UpdateSocraticQuestionInput {
	socraticQuestion: String
	readingSections: String
	thinkPairScore: Int
	thinkPairEarnedPoints: Int
	shareScore: Int
	shareEarnedPoints: Int
	period: periodName
	markingPeriod: MarkingPeriodEnum
	assignedDate: Date!
	isActive: Boolean
	isPresent: Boolean
}

input SocraticQuestionProtocolInput {
	period: periodName
	socraticQuestion: String
	readingSections: String
	thinkPairScore: Int
	thinkPairEarnedPoints: Int
	shareScore: Int
	shareEarnedPoints: Int
	markingPeriod: MarkingPeriodEnum
	assignedDate: Date!
	isActive: Boolean
	isPresent: Boolean
}

type UpdatedSocraticQuestionProtocolPayload {
	students: [Student]
}

type SocraticQuestionProtocolPayload {
	students: [Student]
}

input StudentTestsInput {
	assignmentType: AssignmentType
	readingPages: String
	readingSections: String
	assignedDate: Date
	dueDate: Date
	markingPeriod: MarkingPeriodEnum
	missing: Boolean
	exempt: Boolean
	score: Int
	maxScore: Int
	earnedPoints: Int
	studyTime: Int
}

type StudentTests {
	assignmentType: AssignmentType
	readingPages: String
	readingSections: String
	assignedDate: Date
	dueDate: Date
	markingPeriod: MarkingPeriodEnum
	missing: Boolean
	exempt: Boolean
	score: Int
	maxScore: Int
	earnedPoints: Int
	studyTime: Int
}

input StudentAssignmentsInput {
	assignmentType: AssignmentType!
	readingPages: String!
	readingSections: String!
	assignedDate: Date!
	dueDate: Date!
	missing: Boolean!
	exempt: Boolean!
	score: Int!
	maxScore: Int
	earnedPoints: Int
	late: Boolean!
	comments: [String]
}

type StudentAssignments {
	assignmentType: AssignmentType!
	readingPages: String!
	readingSections: String!
	markingPeriod: MarkingPeriodEnum
	assignedDate: Date!
	dueDate: Date!
	missing: Boolean!
	exempt: Boolean!
	score: Int!
	maxScore: Int
	earnedPoints: Int
	comments: [String]
	late: Boolean!
}

type SchoolDayInfo {
	_id: ID!
	date: String!
	number: Int!
	markingPeriod: MarkingPeriodEnum!
}

input QuestionInput {
	type: String
	question: String
}

type Vocab {
	word: String
	partOfSpeech: String
	definition: String
}

type Questions {
	type: String
	question: String
	# majorTextStructure: majorTextStructures!
	# minorTextStructure: [minorTextStructures]
}

enum majorTextStructureEnum {
	CAUSE_AND_EFFECT
	CAUSE
	EFFECT
	PROBLEM_AND_SOLUTION
	PROBLEM
	SOLUTION
}

enum MarkingPeriodEnum {
	FIRST
	SECOND
	THIRD
	FOURTH
}
input UpdateStudentInput {
	_id: ID!
	nickName: String
	schoolID: String
	firstName: String!
	lastName: String!
	responsibilityPoints: Int!
	desk: Int!
	period: periodName!
	teacher: String!
	learningStyle: String!
	daysAbsent: [Date]
}

type Teacher {
	name: String!
	teachesCourses: [Course!]!
}

type Course {
	name: String!
	section: String!
	period: periodName!
	hasTeacher: Teacher!
	isEmpty: Boolean!
	roster: [Student]
	assignmentList: [Assignments]
}
